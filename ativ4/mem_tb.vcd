$date
	Sat Nov 16 19:40:41 2024
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module mem_tb $end
$var wire 2 ! select_mux_3_out [1:0] $end
$var wire 2 " select_mux_2_out [1:0] $end
$var wire 1 # reg_file_write_out $end
$var wire 32 $ mem_out [31:0] $end
$var wire 32 % alu_result_out [31:0] $end
$var wire 32 & add_pc_out [31:0] $end
$var reg 32 ' add_pc_in [31:0] $end
$var reg 32 ( alu_out [31:0] $end
$var reg 1 ) branch_in $end
$var reg 1 * branch_instruction $end
$var reg 1 + clk $end
$var reg 1 , mem_re $end
$var reg 1 - mem_we $end
$var reg 1 . reg_file_write_in $end
$var reg 32 / reg_out_b [31:0] $end
$var reg 1 0 reset $end
$var reg 2 1 select_mux_2_in [1:0] $end
$var reg 2 2 select_mux_4_in [1:0] $end
$scope module uut $end
$var wire 32 3 add_pc_in [31:0] $end
$var wire 32 4 alu_out [31:0] $end
$var wire 1 ) branch_in $end
$var wire 1 * branch_instruction $end
$var wire 1 + clk $end
$var wire 1 , mem_re $end
$var wire 1 - mem_we $end
$var wire 1 . reg_file_write_in $end
$var wire 32 5 reg_out_b [31:0] $end
$var wire 1 0 reset $end
$var wire 2 6 select_mux_2_in [1:0] $end
$var wire 2 7 select_mux_4_in [1:0] $end
$var wire 2 8 select_mux_3_out [1:0] $end
$var wire 2 9 select_mux_2_out [1:0] $end
$var wire 1 # reg_file_write_out $end
$var wire 32 : mux_4_out [31:0] $end
$var wire 32 ; mem_out [31:0] $end
$var wire 32 < mem_data_out [31:0] $end
$var wire 32 = alu_result_out [31:0] $end
$var wire 32 > add_pc_out [31:0] $end
$scope module MEM $end
$var wire 32 ? addr [31:0] $end
$var wire 1 + clk $end
$var wire 1 , re $end
$var wire 1 - we $end
$var wire 32 @ out [31:0] $end
$var wire 32 A Din [31:0] $end
$var parameter 32 B size $end
$var reg 8192 C memory [8191:0] $end
$var integer 32 D i [31:0] $end
$upscope $end
$scope module MEM_WB $end
$var wire 32 E add_pc_in [31:0] $end
$var wire 32 F alu_result_in [31:0] $end
$var wire 1 + clk $end
$var wire 32 G mem_in [31:0] $end
$var wire 1 . reg_file_write_in $end
$var wire 1 0 reset $end
$var wire 2 H select_mux_2_in [1:0] $end
$var reg 32 I add_pc_out [31:0] $end
$var reg 32 J alu_result_out [31:0] $end
$var reg 32 K mem_out [31:0] $end
$var reg 1 # reg_file_write_out $end
$var reg 2 L select_mux_2_out [1:0] $end
$upscope $end
$scope module MUX_4 $end
$var wire 32 M D0 [31:0] $end
$var wire 32 N D1 [31:0] $end
$var wire 32 O D2 [31:0] $end
$var wire 32 P D3 [31:0] $end
$var wire 2 Q select [1:0] $end
$var wire 32 R out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000000 B
$end
#0
$dumpvars
b0 R
b0 Q
bz P
bz O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
bx G
b0 F
b0 E
b100000000 D
b
b0 A
bx @
b0 ?
b0 >
b0 =
bx <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
10
b0 /
0.
0-
0,
0+
0*
0)
b0 (
b0 '
b0 &
b0 %
b0 $
0#
b0 "
b0 !
$end
#250
1+
#500
0+
00
#750
bx $
bx ;
bx K
1+
#1000
0+
#1250
1+
#1500
b11011110101011011011111011101111 :
b11011110101011011011111011101111 A
b11011110101011011011111011101111 R
0+
b1 2
b1 7
b1 Q
b11011110101011011011111011101111 /
b11011110101011011011111011101111 5
b11011110101011011011111011101111 N
b100000000 (
b100000000 4
b100000000 ?
b100000000 F
b100000000 M
1-
#1750
b100000000 %
b100000000 =
b100000000 J
1+
#2000
0+
#2250
1+
#2500
b10001 <
b10001 @
b10001 G
0+
b11 (
b11 4
b11 ?
b11 F
b11 M
1,
0-
#2750
b11 %
b11 =
b11 J
b10001 $
b10001 ;
b10001 K
1+
#3000
0+
#3250
1+
#3500
0+
1*
#3750
1+
#4000
0+
#4250
1+
#4500
b1 !
b1 8
0+
1)
#4750
1+
#5000
0+
#5250
1+
#5500
0+
b100000000000000 '
b100000000000000 3
b100000000000000 E
b1100000000 (
b1100000000 4
b1100000000 ?
b1100000000 F
b1100000000 M
1.
0,
#5750
b1100000000 %
b1100000000 =
b1100000000 J
b100000000000000 &
b100000000000000 >
b100000000000000 I
1#
1+
#6000
0+
#6250
1+
#6500
b1100000000 :
b1100000000 A
b1100000000 R
0+
b0 2
b0 7
b0 Q
#6750
1+
#7000
0+
#7250
1+
#7500
b11011110101011011011111011101111 :
b11011110101011011011111011101111 A
b11011110101011011011111011101111 R
0+
b1 2
b1 7
b1 Q
#7750
1+
#8000
0+
#8250
1+
#8500
0+
#8750
1+
#9000
0+
#9250
1+
#9500
0+
#9750
1+
#10000
0+
#10250
1+
#10500
0+
#10750
1+
#11000
0+
#11250
1+
#11500
0+
#11750
1+
#12000
0+
#12250
1+
#12500
0+
