$date
	Sun Nov 17 16:37:59 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module instruction_decode_tb $end
$var wire 2 ! select_mux_4_out [1:0] $end
$var wire 2 " select_mux_2_out [1:0] $end
$var wire 2 # select_mux_1_out [1:0] $end
$var wire 1 $ reg_file_write_out $end
$var wire 32 % reg_b_out [31:0] $end
$var wire 32 & reg_a_out [31:0] $end
$var wire 32 ' pc_out [31:0] $end
$var wire 1 ( pc_load $end
$var wire 1 ) mem_we_out $end
$var wire 1 * mem_re_out $end
$var wire 32 + immediate_out [31:0] $end
$var wire 1 , if_id_load $end
$var wire 7 - funct7e3_out [6:0] $end
$var wire 1 . branch_instruction $end
$var wire 2 / alu_op_out [1:0] $end
$var reg 32 0 Din [31:0] $end
$var reg 1 1 branch_instruction_id_ex $end
$var reg 5 2 caso [4:0] $end
$var reg 1 3 clock $end
$var reg 32 4 instruction [31:0] $end
$var reg 32 5 pc [31:0] $end
$var reg 5 6 rd_ex_mem [4:0] $end
$var reg 5 7 rd_mem_wb [4:0] $end
$var reg 1 8 reset $end
$var reg 5 9 rw [4:0] $end
$var reg 1 : write_enable $end
$scope module ID $end
$var wire 32 ; Din [31:0] $end
$var wire 1 . branch_instruction $end
$var wire 1 1 branch_instruction_id_ex $end
$var wire 1 3 clock $end
$var wire 1 , if_id_load $end
$var wire 32 < instruction [31:0] $end
$var wire 32 = pc [31:0] $end
$var wire 1 ( pc_load $end
$var wire 5 > rd_ex_mem [4:0] $end
$var wire 5 ? rd_mem_wb [4:0] $end
$var wire 1 8 reset $end
$var wire 5 @ rw [4:0] $end
$var wire 1 : write_enable $end
$var wire 2 A select_mux_4_out [1:0] $end
$var wire 2 B select_mux_4_int [1:0] $end
$var wire 2 C select_mux_2_out [1:0] $end
$var wire 2 D select_mux_2_int [1:0] $end
$var wire 2 E select_mux_1_out [1:0] $end
$var wire 2 F select_mux_1_int [1:0] $end
$var wire 5 G s_rd [4:0] $end
$var wire 5 H s_rb [4:0] $end
$var wire 5 I s_ra [4:0] $end
$var wire 1 J s_pc_load $end
$var wire 32 K s_out_b [31:0] $end
$var wire 32 L s_out_a [31:0] $end
$var wire 1 M s_mux5_selector $end
$var wire 32 N s_immediate [31:0] $end
$var wire 1 O s_if_id_load $end
$var wire 1 $ reg_file_write_out $end
$var wire 1 P reg_file_write_int $end
$var wire 32 Q reg_b_out [31:0] $end
$var wire 32 R reg_a_out [31:0] $end
$var wire 32 S pc_out [31:0] $end
$var wire 1 ) mem_we_out $end
$var wire 1 T mem_we_int $end
$var wire 1 * mem_re_out $end
$var wire 1 U mem_re_int $end
$var wire 32 V immediate_out [31:0] $end
$var wire 7 W funct7e3_out [6:0] $end
$var wire 1 X branch_instruction_int $end
$var wire 2 Y alu_op_out [1:0] $end
$var wire 2 Z alu_op_int [1:0] $end
$scope module CONTROLLER $end
$var wire 1 3 clock $end
$var wire 7 [ opcode [6:0] $end
$var wire 1 8 reset $end
$var reg 2 \ alu_op [1:0] $end
$var reg 1 X branch_instruction $end
$var reg 1 U mem_re $end
$var reg 1 T mem_we $end
$var reg 1 P reg_file_write $end
$var reg 2 ] select_mux_1 [1:0] $end
$var reg 2 ^ select_mux_2 [1:0] $end
$var reg 2 _ select_mux_4 [1:0] $end
$upscope $end
$scope module HAZARD $end
$var wire 1 X branch_instruction_controller $end
$var wire 1 1 branch_instruction_id_ex $end
$var wire 1 3 clock $end
$var wire 1 ` data_hazard $end
$var wire 1 O if_id_load $end
$var wire 1 M mux5_selector $end
$var wire 7 a opcode [6:0] $end
$var wire 1 J pc_load $end
$var wire 5 b rd_ex_mem [4:0] $end
$var wire 5 c rd_mem_wb [4:0] $end
$var wire 1 8 reset $end
$var wire 5 d rs1 [4:0] $end
$var wire 5 e rs2 [4:0] $end
$upscope $end
$scope module ID_EX_REGISTER $end
$var wire 2 f alu_op_in [1:0] $end
$var wire 1 3 clk $end
$var wire 7 g funct7e3_in [6:0] $end
$var wire 1 h mem_re_in $end
$var wire 1 i mem_we_in $end
$var wire 32 j pc_in [31:0] $end
$var wire 1 k reg_file_write_in $end
$var wire 1 8 reset $end
$var wire 2 l select_mux_1_in [1:0] $end
$var wire 2 m select_mux_2_in [1:0] $end
$var wire 2 n select_mux_4_in [1:0] $end
$var wire 32 o reg_b_in [31:0] $end
$var wire 32 p reg_a_in [31:0] $end
$var wire 32 q immediate_in [31:0] $end
$var reg 2 r alu_op_out [1:0] $end
$var reg 7 s funct7e3_out [6:0] $end
$var reg 32 t immediate_out [31:0] $end
$var reg 1 * mem_re_out $end
$var reg 1 ) mem_we_out $end
$var reg 32 u pc_out [31:0] $end
$var reg 32 v reg_a_out [31:0] $end
$var reg 32 w reg_b_out [31:0] $end
$var reg 1 $ reg_file_write_out $end
$var reg 2 x select_mux_1_out [1:0] $end
$var reg 2 y select_mux_2_out [1:0] $end
$var reg 2 z select_mux_4_out [1:0] $end
$upscope $end
$scope module IMMEDIATE $end
$var wire 32 { instruction [31:0] $end
$var wire 32 | immediate [31:0] $end
$upscope $end
$scope module REGISTER_FILE $end
$var wire 32 } Din [31:0] $end
$var wire 32 ~ DoutA [31:0] $end
$var wire 32 !" DoutB [31:0] $end
$var wire 1 3 clk $end
$var wire 5 "" ra [4:0] $end
$var wire 5 #" rb [4:0] $end
$var wire 5 $" rw [4:0] $end
$var wire 1 : we $end
$var reg 32 %" we_reg [31:0] $end
$var integer 32 &" j [31:0] $end
$scope begin genblk1[1] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 '" in [31:0] $end
$var wire 1 (" load $end
$var wire 1 )" reset $end
$var reg 32 *" out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 +" in [31:0] $end
$var wire 1 ," load $end
$var wire 1 -" reset $end
$var reg 32 ." out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 /" in [31:0] $end
$var wire 1 0" load $end
$var wire 1 1" reset $end
$var reg 32 2" out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 3" in [31:0] $end
$var wire 1 4" load $end
$var wire 1 5" reset $end
$var reg 32 6" out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 7" in [31:0] $end
$var wire 1 8" load $end
$var wire 1 9" reset $end
$var reg 32 :" out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 ;" in [31:0] $end
$var wire 1 <" load $end
$var wire 1 =" reset $end
$var reg 32 >" out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 ?" in [31:0] $end
$var wire 1 @" load $end
$var wire 1 A" reset $end
$var reg 32 B" out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[8] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 C" in [31:0] $end
$var wire 1 D" load $end
$var wire 1 E" reset $end
$var reg 32 F" out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[9] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 G" in [31:0] $end
$var wire 1 H" load $end
$var wire 1 I" reset $end
$var reg 32 J" out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[10] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 K" in [31:0] $end
$var wire 1 L" load $end
$var wire 1 M" reset $end
$var reg 32 N" out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[11] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 O" in [31:0] $end
$var wire 1 P" load $end
$var wire 1 Q" reset $end
$var reg 32 R" out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[12] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 S" in [31:0] $end
$var wire 1 T" load $end
$var wire 1 U" reset $end
$var reg 32 V" out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[13] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 W" in [31:0] $end
$var wire 1 X" load $end
$var wire 1 Y" reset $end
$var reg 32 Z" out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[14] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 [" in [31:0] $end
$var wire 1 \" load $end
$var wire 1 ]" reset $end
$var reg 32 ^" out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[15] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 _" in [31:0] $end
$var wire 1 `" load $end
$var wire 1 a" reset $end
$var reg 32 b" out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[16] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 c" in [31:0] $end
$var wire 1 d" load $end
$var wire 1 e" reset $end
$var reg 32 f" out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[17] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 g" in [31:0] $end
$var wire 1 h" load $end
$var wire 1 i" reset $end
$var reg 32 j" out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[18] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 k" in [31:0] $end
$var wire 1 l" load $end
$var wire 1 m" reset $end
$var reg 32 n" out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[19] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 o" in [31:0] $end
$var wire 1 p" load $end
$var wire 1 q" reset $end
$var reg 32 r" out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[20] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 s" in [31:0] $end
$var wire 1 t" load $end
$var wire 1 u" reset $end
$var reg 32 v" out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[21] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 w" in [31:0] $end
$var wire 1 x" load $end
$var wire 1 y" reset $end
$var reg 32 z" out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[22] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 {" in [31:0] $end
$var wire 1 |" load $end
$var wire 1 }" reset $end
$var reg 32 ~" out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[23] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 !# in [31:0] $end
$var wire 1 "# load $end
$var wire 1 ## reset $end
$var reg 32 $# out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[24] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 %# in [31:0] $end
$var wire 1 &# load $end
$var wire 1 '# reset $end
$var reg 32 (# out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[25] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 )# in [31:0] $end
$var wire 1 *# load $end
$var wire 1 +# reset $end
$var reg 32 ,# out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[26] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 -# in [31:0] $end
$var wire 1 .# load $end
$var wire 1 /# reset $end
$var reg 32 0# out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[27] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 1# in [31:0] $end
$var wire 1 2# load $end
$var wire 1 3# reset $end
$var reg 32 4# out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[28] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 5# in [31:0] $end
$var wire 1 6# load $end
$var wire 1 7# reset $end
$var reg 32 8# out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[29] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 9# in [31:0] $end
$var wire 1 :# load $end
$var wire 1 ;# reset $end
$var reg 32 <# out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[30] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 =# in [31:0] $end
$var wire 1 ># load $end
$var wire 1 ?# reset $end
$var reg 32 @# out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[31] $end
$scope module xI $end
$var wire 1 3 clk $end
$var wire 32 A# in [31:0] $end
$var wire 1 B# load $end
$var wire 1 C# reset $end
$var reg 32 D# out [31:0] $end
$upscope $end
$upscope $end
$scope module x0 $end
$var wire 1 3 clk $end
$var wire 32 E# in [31:0] $end
$var wire 1 F# load $end
$var wire 1 G# reset $end
$var reg 32 H# out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx H#
0G#
1F#
b0 E#
bx D#
0C#
0B#
b0 A#
bx @#
0?#
0>#
b0 =#
bx <#
0;#
0:#
b0 9#
bx 8#
07#
06#
b0 5#
bx 4#
03#
02#
b0 1#
bx 0#
0/#
0.#
b0 -#
bx ,#
0+#
0*#
b0 )#
bx (#
0'#
0&#
b0 %#
bx $#
0##
0"#
b0 !#
bx ~"
0}"
0|"
b0 {"
bx z"
0y"
0x"
b0 w"
bx v"
0u"
0t"
b0 s"
bx r"
0q"
0p"
b0 o"
bx n"
0m"
0l"
b0 k"
bx j"
0i"
0h"
b0 g"
bx f"
0e"
0d"
b0 c"
bx b"
0a"
0`"
b0 _"
bx ^"
0]"
0\"
b0 ["
bx Z"
0Y"
0X"
b0 W"
bx V"
0U"
0T"
b0 S"
bx R"
0Q"
0P"
b0 O"
bx N"
0M"
0L"
b0 K"
bx J"
0I"
0H"
b0 G"
bx F"
0E"
0D"
b0 C"
bx B"
0A"
0@"
b0 ?"
bx >"
0="
0<"
b0 ;"
bx :"
09"
08"
b0 7"
bx 6"
05"
04"
b0 3"
bx 2"
01"
00"
b0 /"
bx ."
0-"
0,"
b0 +"
bx *"
0)"
0("
b0 '"
b100000 &"
b0 %"
b1 $"
b11 #"
b0 ""
bx !"
bx ~
b0 }
b11 |
b1100000010000010000011 {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
b11 q
bx p
bx o
bx n
bx m
bx l
xk
b0 j
xi
xh
b0 g
bx f
b11 e
b0 d
b11 c
b10 b
b11 a
0`
bx _
bx ^
bx ]
bx \
b11 [
bx Z
bx Y
xX
bx W
bx V
xU
xT
bx S
bx R
bx Q
xP
xO
b11 N
0M
bx L
bx K
xJ
b0 I
b11 H
b1 G
bx F
bx E
bx D
bx C
bx B
bx A
b1 @
b11 ?
b10 >
b0 =
b1100000010000010000011 <
b0 ;
0:
b1 9
08
b11 7
b10 6
b0 5
b1100000010000010000011 4
03
b0 2
01
b0 0
bx /
x.
bx -
x,
bx +
x*
x)
x(
bx '
bx &
bx %
x$
bx #
bx "
bx !
$end
#5
1(
1J
1,
1O
b0 n
b0 m
b1 l
b1 f
1k
0i
1h
0.
0X
b0 B
b0 _
b0 D
b0 ^
b1 F
b1 ]
b1 Z
b1 \
1P
0T
1U
b0 -
b0 W
b0 s
b0 '
b0 S
b0 u
b11 +
b11 V
b11 t
b0 &
b0 R
b0 v
b0 H#
b0 L
b0 p
b0 ~
13
#10
b0 l
b0 f
0k
0h
b0 +
b0 V
b0 t
b0 %
b0 Q
b0 w
b0 !
b0 A
b0 z
b0 "
b0 C
b0 y
b0 #
b0 E
b0 x
b0 /
b0 Y
b0 r
0$
0)
0*
b0 F
b0 ]
b0 Z
b0 \
0P
0U
03
18
#15
13
#20
1("
b10 %"
b100000 &"
03
b100 7
b100 ?
b100 c
b11 6
b11 >
b11 b
b101 0
b101 ;
b101 }
b101 '"
b101 +"
b101 /"
b101 3"
b101 7"
b101 ;"
b101 ?"
b101 C"
b101 G"
b101 K"
b101 O"
b101 S"
b101 W"
b101 ["
b101 _"
b101 c"
b101 g"
b101 k"
b101 o"
b101 s"
b101 w"
b101 {"
b101 !#
b101 %#
b101 )#
b101 -#
b101 1#
b101 5#
b101 9#
b101 =#
b101 A#
1:
b1 2
08
#25
b1 l
b1 f
1k
1h
b11 +
b11 V
b11 t
bx %
bx Q
bx w
b1 F
b1 ]
b1 Z
b1 \
1P
1U
b101 *"
13
#30
1,"
0("
b100 %"
b111 N
b111 q
b111 |
b100000 &"
b111 H
b111 e
b111 #"
b10 G
03
b10 9
b10 @
b10 $"
b10001 0
b10001 ;
b10001 }
b10001 '"
b10001 +"
b10001 /"
b10001 3"
b10001 7"
b10001 ;"
b10001 ?"
b10001 C"
b10001 G"
b10001 K"
b10001 O"
b10001 S"
b10001 W"
b10001 ["
b10001 _"
b10001 c"
b10001 g"
b10001 k"
b10001 o"
b10001 s"
b10001 w"
b10001 {"
b10001 !#
b10001 %#
b10001 )#
b10001 -#
b10001 1#
b10001 5#
b10001 9#
b10001 =#
b10001 A#
b1 5
b1 =
b1 j
b11100000010000100000011 4
b11100000010000100000011 <
b11100000010000100000011 {
b10 2
#35
b1 '
b1 S
b1 u
b111 +
b111 V
b111 t
b1 #
b1 E
b1 x
b1 /
b1 Y
b1 r
1$
1*
b10001 ."
13
#40
0,"
b0 %"
0,
0O
0(
0J
b0 l
b0 f
0k
0h
1M
1`
b1 N
b1 q
b1 |
b100000 &"
bx L
bx p
bx ~
b11 I
b11 d
b11 ""
b101 K
b101 o
b101 !"
b1 H
b1 e
b1 #"
b100 G
03
b101 7
b101 ?
b101 c
b1100011 0
b1100011 ;
b1100011 }
b1100011 '"
b1100011 +"
b1100011 /"
b1100011 3"
b1100011 7"
b1100011 ;"
b1100011 ?"
b1100011 C"
b1100011 G"
b1100011 K"
b1100011 O"
b1100011 S"
b1100011 W"
b1100011 ["
b1100011 _"
b1100011 c"
b1100011 g"
b1100011 k"
b1100011 o"
b1100011 s"
b1100011 w"
b1100011 {"
b1100011 !#
b1100011 %#
b1100011 )#
b1100011 -#
b1100011 1#
b1100011 5#
b1100011 9#
b1100011 =#
b1100011 A#
b10 5
b10 =
b10 j
0:
b100011010001000000011 4
b100011010001000000011 <
b100011010001000000011 {
b11 2
#45
b10 '
b10 S
b10 u
b1 +
b1 V
b1 t
b101 %
b101 Q
b101 w
bx &
bx R
bx v
b0 #
b0 E
b0 x
b0 /
b0 Y
b0 r
0$
0*
13
#50
1,
1O
1(
1J
b1 l
b1 f
1k
1h
0M
0`
b1 N
b1 q
b1 |
b100000 &"
b100011 a
b100011 [
b100 I
b100 d
b100 ""
bx K
bx o
bx !"
b11 H
b11 e
b11 #"
b1 G
03
b110 7
b110 ?
b110 c
b101 6
b101 >
b101 b
b11 9
b11 @
b11 $"
b10001 0
b10001 ;
b10001 }
b10001 '"
b10001 +"
b10001 /"
b10001 3"
b10001 7"
b10001 ;"
b10001 ?"
b10001 C"
b10001 G"
b10001 K"
b10001 O"
b10001 S"
b10001 W"
b10001 ["
b10001 _"
b10001 c"
b10001 g"
b10001 k"
b10001 o"
b10001 s"
b10001 w"
b10001 {"
b10001 !#
b10001 %#
b10001 )#
b10001 -#
b10001 1#
b10001 5#
b10001 9#
b10001 =#
b10001 A#
b11 5
b11 =
b11 j
b1100100010000010100011 4
b1100100010000010100011 <
b1100100010000010100011 {
b100 2
#55
b1 n
b0 f
0k
1i
0h
b1 B
b1 _
b0 Z
b0 \
0P
1T
0U
b11 '
b11 S
b11 u
bx %
bx Q
bx w
b1 #
b1 E
b1 x
b1 /
b1 Y
b1 r
1$
1*
13
#60
0,
0O
0(
0J
b0 n
b0 l
0i
1M
1`
03
b11 7
b11 ?
b11 c
b100 5
b100 =
b100 j
b101 2
#65
b100 '
b100 S
b100 u
b0 #
b0 E
b0 x
b0 /
b0 Y
b0 r
0$
0*
13
#70
1,
1O
1(
1J
b1 n
b1 l
1i
0M
0`
b0 N
b0 q
b0 |
b100000 &"
b110011 a
b110011 [
b1111 G
03
b110 7
b110 ?
b110 c
b1 9
b1 @
b1 $"
b0 0
b0 ;
b0 }
b0 '"
b0 +"
b0 /"
b0 3"
b0 7"
b0 ;"
b0 ?"
b0 C"
b0 G"
b0 K"
b0 O"
b0 S"
b0 W"
b0 ["
b0 _"
b0 c"
b0 g"
b0 k"
b0 o"
b0 s"
b0 w"
b0 {"
b0 !#
b0 %#
b0 )#
b0 -#
b0 1#
b0 5#
b0 9#
b0 =#
b0 A#
b101 5
b101 =
b101 j
b1100100000011110110011 4
b1100100000011110110011 <
b1100100000011110110011 {
b110 2
#75
b0 n
b1 m
b0 l
b10 f
1k
0i
b0 B
b0 _
b1 D
b1 ^
b0 F
b0 ]
b10 Z
b10 \
1P
0T
b101 '
b101 S
b101 u
b0 +
b0 V
b0 t
b1 !
b1 A
b1 z
b1 #
b1 E
b1 x
1)
13
#80
0,
0O
0(
0J
b0 m
b0 f
0k
1M
1`
03
b11 6
b11 >
b11 b
b110 5
b110 =
b110 j
b111 2
#85
b110 '
b110 S
b110 u
b0 !
b0 A
b0 z
b0 #
b0 E
b0 x
0)
13
#90
0`
03
b101 6
b101 >
b101 b
b111 5
b111 =
b111 j
11
b1000 2
#95
b111 '
b111 S
b111 u
13
#100
1(
1J
b10000 N
b10000 q
b10000 |
1,
1O
b1 m
b10 f
1k
0M
b1100011 a
b1100011 [
b110 I
b110 d
b110 ""
b1111 H
b1111 e
b1111 #"
b10000 G
03
b111 7
b111 ?
b111 c
b1000 5
b1000 =
b1000 j
01
b111100110000100001100011 4
b111100110000100001100011 <
b111100110000100001100011 {
b1001 2
#105
0(
0J
0,
0O
b0 m
b0 f
0k
b1000 '
b1000 S
b1000 u
b10000 +
b10000 V
b10000 t
b1 "
b1 C
b1 y
b10 /
b10 Y
b10 r
1$
1.
1X
b0 D
b0 ^
b0 Z
b0 \
0P
13
#110
03
#115
b0 "
b0 C
b0 y
b0 /
b0 Y
b0 r
0$
13
#120
03
